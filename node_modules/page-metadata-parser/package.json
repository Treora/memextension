{
  "_args": [
    [
      "page-metadata-parser@git://github.com/Treora/page-metadata-parser.git#npm-testable",
      "/home/raj/webmemex-extension-master (2)"
    ]
  ],
  "_from": "git://github.com/Treora/page-metadata-parser.git#npm-testable",
  "_id": "page-metadata-parser@0.6.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/page-metadata-parser",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/Treora/page-metadata-parser/npm-testable/package.json",
      "gitUrl": "git://github.com/Treora/page-metadata-parser.git#npm-testable",
      "httpsUrl": "git+https://github.com/Treora/page-metadata-parser.git#npm-testable",
      "shortcut": "github:Treora/page-metadata-parser#npm-testable",
      "ssh": "git@github.com:Treora/page-metadata-parser.git#npm-testable",
      "sshUrl": "git+ssh://git@github.com/Treora/page-metadata-parser.git#npm-testable",
      "type": "github"
    },
    "name": "page-metadata-parser",
    "raw": "page-metadata-parser@git://github.com/Treora/page-metadata-parser.git#npm-testable",
    "rawSpec": "git://github.com/Treora/page-metadata-parser.git#npm-testable",
    "scope": null,
    "spec": "git://github.com/Treora/page-metadata-parser.git#npm-testable",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/Treora/page-metadata-parser.git#07fe4ebfdee0b6b3197a41eb2b90fea8e3f07bf5",
  "_shasum": "362fbdbada3140ed391b007ae931e6b38f898ce3",
  "_shrinkwrap": null,
  "_spec": "page-metadata-parser@git://github.com/Treora/page-metadata-parser.git#npm-testable",
  "_where": "/home/raj/webmemex-extension-master (2)",
  "author": {
    "name": "Jared Kerim"
  },
  "babel": {
    "presets": [
      "es2015"
    ]
  },
  "browser": "lib/parser.js",
  "bugs": {
    "url": "https://github.com/mozilla/page-metadata-parser/issues"
  },
  "dependencies": {
    "fathom-web": "git://github.com/Treora/fathom.git#npm-testable"
  },
  "description": "A JavaScript library for parsing metadata in a Web Page.",
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-cli": "^6.22.2",
    "babel-core": "^6.17.0",
    "babel-loader": "^6.2.5",
    "babel-polyfill": "^6.13.0",
    "babel-preset-es2015": "^6.14.0",
    "chai": "^3.5.0",
    "coveralls": "^2.11.9",
    "domino": "^1.0.25",
    "eslint": "^2.13.1",
    "eslint-plugin-mozilla": "^0.0.3",
    "istanbul": "^0.4.4",
    "istanbul-instrumenter-loader": "^0.2.0",
    "karma": "^1.0.0",
    "karma-coverage": "^1.0.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.0.1",
    "karma-mocha-reporter": "^2.0.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.5.3",
    "npm-run-all": "^2.2.0",
    "webpack": "^1.13.2"
  },
  "gitHead": "07fe4ebfdee0b6b3197a41eb2b90fea8e3f07bf5",
  "homepage": "https://github.com/mozilla/page-metadata-parser#readme",
  "keywords": [
    "metadata",
    "page",
    "parser"
  ],
  "license": "MPL-2.0",
  "main": "parser.js",
  "name": "page-metadata-parser",
  "optionalDependencies": {},
  "readme": "# Page Metadata Parser\nA Javascript library for parsing metadata in web pages.\n\n[![CircleCI](https://circleci.com/gh/mozilla/page-metadata-parser.svg?style=svg)](https://circleci.com/gh/mozilla/page-metadata-parser)\n\n[![Coverage Status](https://coveralls.io/repos/github/mozilla/page-metadata-parser/badge.svg?branch=master)](https://coveralls.io/github/mozilla/page-metadata-parser?branch=master)\n\n\n## Installation\n\n    npm install --save page-metadata-parser\n\n## Overview\n\n### Requirements\n\nThis library is meant to be used either in the browser (embedded directly in a website or into a browser addon/extension) or on a server (node.js).\n\nEach function expects to be passed a [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) object, which may be created either directly by a browser or on the server using a [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) compatible object, such as that provided by [jsdom](https://github.com/tmpvar/jsdom).\n\nYou may use each rule individually, or together to parse all of the metadata provided by this library.\n\n### Supported schemas\n\nThis library employs parsers for the following formats:\n\n[opengraph](http://ogp.me/)\n\n[twitter](https://dev.twitter.com/cards/markup)\n\n[meta tags](https://developer.mozilla.org/en/docs/Web/HTML/Element/meta)\n\n### Rules\n\nThis library is based on the work of [Mozilla Fathom](https://github.com/mozilla/fathom), a framework for using rules to parse content on web pages.\n\nA single rule instructs the parser on a possible DOM node to locate a specific piece of content.  For instance, a rule to parse the title of a page might look like\n\n    ['meta[property=\"og:title\"]', node => node.element.getAttribute('content')]\n\nA rule consists of two parts, a [querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) compatible string which is used to look up the target content, and a callable which receives a Node (a wrapper around a DOM element) and returns the desired content from that Node.\n\nThis rule would be able to successfully find a page's title from the following HTML sample:\n\n    <meta property=\"og:title\" content=\"A Sample Page\" />\n\nMany rules together form a Rule Set.  This library will apply each rule to a page and choose the 'best' result.  In our case, the order in which rules are defined indicate their preference, with the first rule being the most preferred.  A Rule Set can be defined like so:\n\n    const titleRules = {\n      rules: [\n        ['meta[property=\"og:title\"]', node => node.element.getAttribute('content')],\n        ['title', node => node.element.text],\n      ]\n    };\n\nIn this case, the OpenGraph title will be preferred over the title tag.\n\nThis library includes many rules for a single desired piece of metadata which should allow it to consistently find metadata across many types of pages.  This library is meant to be a community driven effort, and so if there is no rule to find a piece of information from a particular website, contributors are encouraged to add new rules!\n\n## Usage\n\n### Using a single rule\n\nThis library provides rules to find the following forms of metadata in a page:\n\nField | Description\n--- | ---\ntype | The type of content as defined by [opengraph](http://ogp.me/#types).\nurl | A canonical URL for the page.\nprovider | A string representation of the sub and primary domains.\ntitle | A user displayable title for the page.\ndescription | A user displayable description for the page.\nicon_url | A URL which contains an icon for the page.\nimage_url | A URL which contains a preview image for the page.\nkeywords | The meta keywords for the page.\n\nTo use a single rule to find a particular piece of metadata within a page, simply pass that rule  and a [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) object to getMetadata and it will apply each possible selector for that rule until it finds a matching piece of information and return it.\n\nExample:\n\n    const {getMetadata, metadataRules} = require('page-metadata-parser');\n\n    const pageTitle = getMetadata(doc, {title: metadataRules.title});\n\n\n### Extending a single rule\n\nTo add your own additional custom parser to an existing rule, you can simply push it into that rule's array.\n\nExample:\n\n\n    const {getMetadata, metadataRules} = require('page-metadata-parser');\n\n    const customDescriptionRules = metadataRules.description;\n\n    customDescriptionRules.push([\n      ['meta[name=\"customDescription\"]', node => node.element.content]\n    ]);\n\n    const pageDescription = getMetadata(doc, {description: customDescriptionRules});\n\n\n### Using all rules\n\nTo parse all of the available metadata on a page using all of the rules provided in this library, simply call getMetadata on the [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document).\n\n    const {getMetadata, metadataRules} = require('page-metadata-parser');\n\n    const pageMetadata = getMetadata(doc, metadataRules);\n\n\n### Nesting rules\n\nYou can nest rules into arbitrarily deep object structures which will mirror the structure of the returned metadata payload.\n\nExample:\n\n    const {getMetadata, metadataRules} = require('page-metadata-parser');\n\n    const nestedMetadataRules = {\n      images: {\n        preview: metadataRules.image_url,\n        icon: metadataRules.icon_url,\n      },\n      text: {\n        title: metadataRules.title,\n        description: metadataRules.description,\n      }\n    };\n\n    const nestedMetadata = getMetadata(doc, nestedMetadataRules); \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mozilla/page-metadata-parser.git"
  },
  "scripts": {
    "bundle": "webpack --optimize-minimize --optimize-dedupe",
    "clientize": "npm run bundle",
    "cover": "cat ./coverage/lcov/lcov.info | coveralls",
    "prepublish": "npm run transpile && npm run clientize",
    "tdd": "npm run test:karma -- --no-single-run",
    "test": "npm-run-all test:*",
    "test:karma": "karma start",
    "test:lint": "eslint .",
    "test:mocha": "istanbul cover _mocha --report lcovonly -- tests/*.test.js -R spec",
    "transpile": "babel parser.js --out-dir lib"
  },
  "version": "0.6.0"
}
